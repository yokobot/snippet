AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provisioning ECS For worker instance'

Outputs:
    EcsWorkerCluster:
        Value: !Ref 'EcsWorkerCluster'

Parameters:
    KeyName:
        Type: 'AWS::EC2::KeyPair::KeyName'
        Description: 'Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.'
    DesiredCapacity:
        Type: 'Number'
        Default: '2'
        Description: 'Number of instances to launch in your ECS cluster.'
    MaxSize:
        Type: 'Number'
        Default: '4'
        Description: 'Maximum number of instances that can be launched in your ECS cluster.'
    InstanceType:
        Description: 'EC2 instance type'
        Type: 'String'
        Default: 't2.micro'
        AllowedValues: ['t2.micro', 't2.small', 't2.medium', 't2.large', 'm3.medium', 'm3.large',
            'm3.xlarge', 'm3.2xlarge', 'm4.large', 'm4.xlarge', 'm4.2xlarge', 'm4.4xlarge',
            'm4.10xlarge', 'c4.large', 'c4.xlarge', 'c4.2xlarge', 'c4.4xlarge', 'c4.8xlarge',
            'c3.large', 'c3.xlarge', 'c3.2xlarge', 'c3.4xlarge', 'c3.8xlarge', 'r3.large',
            'r3.xlarge', 'r3.2xlarge', 'r3.4xlarge', 'r3.8xlarge', 'i2.xlarge', 'i2.2xlarge', 
            'i2.4xlarge', 'i2.8xlarge']
        ConstraintDescription: 'Please choose a valid instance type.'
    TagName:
        Description: 'For Name Tag'
        Type: 'String'
    Environment:
        AllowedValues:
            - dev
            - stg
            - prd
        Default: 'dev'
        Description: 'Environment (e.g. dev, stg, prd)'
        Type: 'String'

Mappings:
    AWSRegionToAMI:
        us-east-1:
            AMIID: 'ami-eca289fb'
        us-east-2:
            AMIID: 'ami-446f3521'
        us-west-1:
            AMIID: 'ami-9fadf8ff'
        us-west-2:
            AMIID: 'ami-7abc111a'
        eu-west-1:
            AMIID: 'ami-a1491ad2'
        eu-central-1:
            AMIID: 'ami-54f5303b'
        ap-northeast-1:
            AMIID: 'ami-872c4ae1'
        ap-southeast-1:
            AMIID: 'ami-a900a3ca'
        ap-southeast-2:
            AMIID: 'ami-5781be34'
    GlobalIp:
        office:
            home: '210.155.18.149/32'
    InternalIp:
        vpc:
            internal: '10.0.0.0/16'

Resources:
    EcsWorkerCluster:
        Type: 'AWS::ECS::Cluster'
    EcsSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'ECS Security Group'
            VpcId: !ImportValue VPCID
    EcsSecurityGroupSSHinbound:
        Type: 'AWS::EC2::SecurityGroupIngress'
        Properties:
            GroupId: !Ref 'EcsSecurityGroup'
            IpProtocol: 'tcp'
            FromPort: '22'
            ToPort: '22'
            CidrIp: !FindInMap [ GlobalIp, office, home ]
    EcsSecurityGroupInternalinbound:
        Type: 'AWS::EC2::SecurityGroupIngress'
        Properties:
            GroupId: !Ref 'EcsSecurityGroup'
            IpProtocol: 'tcp'
            FromPort: '0'
            ToPort: '65535'
            CidrIp: !FindInMap [ InternalIp, vpc, internal ]
    CloudwatchLogsGroup:
        Type: 'AWS::Logs::LogGroup'
        Properties:
            LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
            RetentionInDays: '14'
    EcsWorkerAutoScalingGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
            VPCZoneIdentifier:
                - !ImportValue SubnetInternalAID
                - !ImportValue SubnetInternalCID
            LaunchConfigurationName: !Ref 'ContainerInstances'
            MinSize: '1'
            MaxSize: !Ref 'MaxSize'
            DesiredCapacity: !Ref 'DesiredCapacity'
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'worker'
                        - !Ref Environment
                  PropagateAtLaunch: 'true'
        UpdatePolicy:
            AutoScalingReplacingUpdate:
                WillReplace: 'true'
    ContainerInstances:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:
            AssociatePublicIpAddress: 'false'
            ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
            SecurityGroups: [!Ref 'EcsSecurityGroup']
            InstanceType: !Ref 'InstanceType'
            IamInstanceProfile: !Ref 'EC2InstanceProfile'
            KeyName: !Ref 'KeyName'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    echo ECS_CLUSTER=${EcsWorkerCluster} >> /etc/ecs/ecs.config
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsWorkerAutoScalingGroup --region ${AWS::Region}
    EcsWorkerTask:
        Type: 'AWS::ECS::TaskDefinition'
        Properties:
            ContainerDefinitions:
                - Name: 'simple-worker'
                  Cpu: '10'
                  Essential: 'true'
                  Image: 'debian'
                  Memory: '300'
                  LogConfiguration:
                      LogDriver: 'awslogs'
                      Options:
                          awslogs-group: !Ref 'CloudwatchLogsGroup'
                          awslogs-region: !Ref 'AWS::Region'
                          awslogs-stream-prefix: 'ecs-demo-worker'
                  EntryPoint:
                      - 'sleep'
                      - '36000'
    EcsWorkerService:
        DependsOn:
            - EcsWorkerTask
            - EcsWorkerAutoScalingGroup
        Type: 'AWS::ECS::Service'
        Properties:
            Cluster: !Ref EcsWorkerCluster
            DesiredCount: '2'
            TaskDefinition: !Ref EcsWorkerTask
    EC2InstanceProfile:
         Type: 'AWS::IAM::InstanceProfile'
         Properties:
             Path: /
             Roles: [!Ref 'EC2Role']
    EC2Role:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: 'Allow'
                      Principal:
                          Service: [ec2.amazonaws.com]
                      Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: 'ecs-service'
                  PolicyDocument:
                      Statement:
                          - Effect: 'Allow'
                            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
                                'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
                                'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
                            Resource: '*'
