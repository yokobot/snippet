AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provisioning VPC'

Outputs:
    VPCID:
        Description: 'VPC ID'
        Value:
            !Ref VPC
        Export:
            Name: 'VPCID'
    SubnetPublicAID:
        Description: 'SubnetPublicA ID'
        Value:
            !Ref SubnetPublicA
        Export:
            Name: 'SubnetPublicAID'
    SubnetPublicCID:
        Description: 'SubnetPublicC ID'
        Value:
            !Ref SubnetPublicC
        Export:
            Name: 'SubnetPublicCID'
    SubnetInternalAID:
        Description: 'SubnetInternalA ID'
        Value:
            !Ref SubnetInternalA
        Export:
            Name: 'SubnetInternalAID'
    SubnetInternalCID:
        Description: 'SubnetInternalC ID'
        Value:
            !Ref SubnetInternalC
        Export:
            Name: 'SubnetInternalCID'

Parameters:
    TagName:
        Description: 'For Name Tag. ex "myapp"'
        Type: 'String'
    Environment:
        AllowedValues:
            - dev
            - stg
            - prd
        Default: 'dev'
        Description: 'Environment (e.g. dev, stg, prd)'
        Type: 'String'
    UseNatGateway:
        Default: 'no'
        Description: 'Did you nead Nat Gateway? yes / no.'
        Type: 'String'

Conditions:
    CreateNatgateway:
        !Equals [UseNatGateway, 'yes']

Resources:
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties: 
            CidrBlock: '10.0.0.0/16'
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'vpc'
                        - !Ref Environment
    SubnetPublicA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            CidrBlock: '10.0.1.0/24'
            AvailabilityZone: 'ap-northeast-1a'
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'subnet-public-A'
                        - !Ref Environment
    SubnetPublicC:
        Type: 'AWS::EC2::Subnet'
        Properties:
            CidrBlock: '10.0.2.0/24'
            AvailabilityZone: 'ap-northeast-1c'
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'subnet-public-C'
                        - !Ref Environment
    SubnetInternalA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            CidrBlock: '10.0.3.0/24'
            AvailabilityZone: 'ap-northeast-1a'
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'subnet-internal-A'
                        - !Ref Environment
    SubnetInternalC:
        Type: 'AWS::EC2::Subnet'
        Properties:
            CidrBlock: '10.0.4.0/24'
            AvailabilityZone: 'ap-northeast-1c'
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'subnet-internal-C'
                        - !Ref Environment
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'igw'
                        - !Ref Environment
    VPCGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            VpcId:
                !Ref VPC
            InternetGatewayId:
                !Ref InternetGateway
    RouteTablePublic:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'rt'
                        - 'public'
                        - !Ref Environment
    RoutePublic:
        Type: 'AWS::EC2::Route'
        DependsOn: InternetGateway
        Properties:
            RouteTableId:
                !Ref RouteTablePublic
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                !Ref InternetGateway
    SubnetPublicRouteA:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties: 
            RouteTableId:
                !Ref RouteTablePublic
            SubnetId:
                !Ref SubnetPublicA
    SubnetPublicRouteC:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId:
                !Ref RouteTablePublic
            SubnetId:
                !Ref SubnetPublicC
    EipNatA:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
    NatGatewayA:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                !GetAtt
                    - EipNatA
                    - AllocationId
            SubnetId:
                !Ref SubnetPublicA
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'natgateway'
                        - 'a'
                        - !Ref Environment
    RouteTableInternalA:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'rt'
                        - 'internal'
                        - 'a'
                        - !Ref Environment
    RouteInternalA:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::Route'
        DependsOn:
            - SubnetInternalRouteA
        Properties:
            RouteTableId:
                !Ref RouteTableInternalA
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                !Ref NatGatewayA
    SubnetInternalRouteA:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId:
                !Ref RouteTableInternalA
            SubnetId:
                !Ref SubnetInternalA
    EipNatC:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
    NatGatewayC:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                !GetAtt
                    - EipNatC
                    - AllocationId
            SubnetId:
                !Ref SubnetPublicC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'natgateway'
                        - 'c'
                        - !Ref Environment
    RouteTableInternalC:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: !Join
                      - '-'
                      - - !Ref TagName
                        - 'rt'
                        - 'internal'
                        - 'c'
                        - !Ref Environment
    RouteInternalC:
        Condition: CreateNatgateway
        Type: 'AWS::EC2::Route'
        DependsOn:
            - SubnetInternalRouteC
        Properties:
            RouteTableId:
                !Ref RouteTableInternalC
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                !Ref NatGatewayC
    SubnetInternalRouteC:
        Condition: CreateNatgateway 
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId:
                !Ref RouteTableInternalC
            SubnetId:
                !Ref SubnetInternalC
